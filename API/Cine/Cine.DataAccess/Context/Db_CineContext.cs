// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Cine.Entities.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace Cine.DataAccess.Context
{
    public partial class Db_CineContext : DbContext
    {
        public Db_CineContext()
        {
        }

        public Db_CineContext(DbContextOptions<Db_CineContext> options)
            : base(options)
        {
        }

        public virtual DbSet<VW_Cargo> VW_Cargos { get; set; }
        public virtual DbSet<VW_Categoria> VW_Categorias { get; set; }
        public virtual DbSet<VW_Cliente> VW_Clientes { get; set; }
        public virtual DbSet<VW_Departamento> VW_Departamentos { get; set; }
        public virtual DbSet<VW_EstadoCivil> VW_EstadoCivils { get; set; }
        public virtual DbSet<VW_MetodoPago> VW_MetodoPagos { get; set; }
        public virtual DbSet<VW_Pantalla> VW_Pantallas { get; set; }
        public virtual DbSet<VW_Proyeccione> VW_Proyecciones { get; set; }
        public virtual DbSet<VW_RolPantalla> VW_RolPantallas { get; set; }
        public virtual DbSet<VW_Sala> VW_Salas { get; set; }
        public virtual DbSet<VW_Usuario> VW_Usuarios { get; set; }
        public virtual DbSet<VW_tbCombo> VW_tbCombos { get; set; }
        public virtual DbSet<VW_tbComboDetalle> VW_tbComboDetalles { get; set; }
        public virtual DbSet<VW_tbDirector> VW_tbDirectors { get; set; }
        public virtual DbSet<VW_tbEmpleado> VW_tbEmpleados { get; set; }
        public virtual DbSet<VW_tbFactura> VW_tbFacturas { get; set; }
        public virtual DbSet<VW_tbFacturaDetalle> VW_tbFacturaDetalles { get; set; }
        public virtual DbSet<VW_tbFacturaDetalle1> VW_tbFacturaDetalle1s { get; set; }
        public virtual DbSet<VW_tbHorario> VW_tbHorarios { get; set; }
        public virtual DbSet<VW_tbInsumo> VW_tbInsumos { get; set; }
        public virtual DbSet<VW_tbPelicula> VW_tbPeliculas { get; set; }
        public virtual DbSet<VW_tbRole> VW_tbRoles { get; set; }
        public virtual DbSet<VW_tbSUCURSAL> VW_tbSUCURSALs { get; set; }
        public virtual DbSet<tbAsiento> tbAsientos { get; set; }
        public virtual DbSet<tbCargo> tbCargos { get; set; }
        public virtual DbSet<tbCategoria> tbCategorias { get; set; }
        public virtual DbSet<tbCategoriaSala> tbCategoriaSalas { get; set; }
        public virtual DbSet<tbCliente> tbClientes { get; set; }
        public virtual DbSet<tbCombo> tbCombos { get; set; }
        public virtual DbSet<tbComboDetalle> tbComboDetalles { get; set; }
        public virtual DbSet<tbDepartamento> tbDepartamentos { get; set; }
        public virtual DbSet<tbDirectore> tbDirectores { get; set; }
        public virtual DbSet<tbEmpleado> tbEmpleados { get; set; }
        public virtual DbSet<tbEstadosCivile> tbEstadosCiviles { get; set; }
        public virtual DbSet<tbFactura> tbFacturas { get; set; }
        public virtual DbSet<tbFacturaDetalle> tbFacturaDetalles { get; set; }
        public virtual DbSet<tbHorario> tbHorarios { get; set; }
        public virtual DbSet<tbInsumo> tbInsumos { get; set; }
        public virtual DbSet<tbMetodosPago> tbMetodosPagos { get; set; }
        public virtual DbSet<tbMunicipio> tbMunicipios { get; set; }
        public virtual DbSet<tbPantalla> tbPantallas { get; set; }
        public virtual DbSet<tbPelicula> tbPeliculas { get; set; }
        public virtual DbSet<tbProyeccione> tbProyecciones { get; set; }
        public virtual DbSet<tbRole> tbRoles { get; set; }
        public virtual DbSet<tbRolesPantalla> tbRolesPantallas { get; set; }
        public virtual DbSet<tbSala> tbSalas { get; set; }
        public virtual DbSet<tbSucursale> tbSucursales { get; set; }
        public virtual DbSet<tbTicket> tbTickets { get; set; }
        public virtual DbSet<tbUsuario> tbUsuarios { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<VW_Cargo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_Cargo", "gral");

                entity.Property(e => e.carg_Cargo)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.carg_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.carg_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.carg_Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VW_Categoria>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_Categorias", "gral");

                entity.Property(e => e.cate_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.cate_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.cate_Id).ValueGeneratedOnAdd();

                entity.Property(e => e.cate_Nombre).HasMaxLength(200);
            });

            modelBuilder.Entity<VW_Cliente>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_Clientes", "gral");

                entity.Property(e => e.clie_Apellidos)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.clie_FechaCrea).HasColumnType("datetime");

                entity.Property(e => e.clie_FechaModifica).HasColumnType("datetime");

                entity.Property(e => e.clie_Id).ValueGeneratedOnAdd();

                entity.Property(e => e.clie_Nombres)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.clie_RTN)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VW_Departamento>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_Departamento");

                entity.Property(e => e.dept_Descripcion)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.dept_FechaCrea).HasColumnType("datetime");

                entity.Property(e => e.dept_Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VW_EstadoCivil>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_EstadoCivil", "gral");

                entity.Property(e => e.estc_Descripcion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.estc_FechaCrea).HasColumnType("datetime");

                entity.Property(e => e.estc_FechaModifica).HasColumnType("datetime");

                entity.Property(e => e.estc_Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VW_MetodoPago>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_MetodoPago", "gral");

                entity.Property(e => e.pago_Descripcion).HasMaxLength(200);

                entity.Property(e => e.pago_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.pago_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.pago_Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VW_Pantalla>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_Pantallas", "acce");

                entity.Property(e => e.panta_Descripcion).IsRequired();

                entity.Property(e => e.panta_FechaCrea).HasColumnType("datetime");

                entity.Property(e => e.panta_FechaModifica).HasColumnType("datetime");

                entity.Property(e => e.panta_Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VW_Proyeccione>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_Proyecciones", "cine");

                entity.Property(e => e.casa_Categoria)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.hor_HoraFin)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.hor_HoraInicio)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.peli_Titulo)
                    .IsRequired()
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<VW_RolPantalla>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_RolPantallas", "acce");

                entity.Property(e => e.ropa_FechaCrea).HasColumnType("datetime");

                entity.Property(e => e.ropa_FechaModifica).HasColumnType("datetime");

                entity.Property(e => e.ropa_Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VW_Sala>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_Salas", "cine");

                entity.Property(e => e.casa_Categoria)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.sala_FechaCrea).HasColumnType("datetime");

                entity.Property(e => e.sala_FechaModifica).HasColumnType("datetime");
            });

            modelBuilder.Entity<VW_Usuario>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_Usuario", "acce");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(511);

                entity.Property(e => e.role_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.user_Contrasenia)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.user_FechaCrea).HasColumnType("datetime");

                entity.Property(e => e.user_FechaModifica).HasColumnType("datetime");

                entity.Property(e => e.user_NombreUsuario)
                    .IsRequired()
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<VW_tbCombo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbCombo", "cine");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(511);

                entity.Property(e => e.comb_Descripcion).IsRequired();

                entity.Property(e => e.comb_FechaCrea).HasColumnType("datetime");

                entity.Property(e => e.comb_FechaModifica).HasColumnType("datetime");

                entity.Property(e => e.comb_Precio).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<VW_tbComboDetalle>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbComboDetalles", "cine");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(511);

                entity.Property(e => e.cdet_FechaCrea).HasColumnType("datetime");

                entity.Property(e => e.cdet_FechaModifica).HasColumnType("datetime");

                entity.Property(e => e.comb_Descripcion).IsRequired();

                entity.Property(e => e.comb_Precio).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.insu_Descripcion).IsRequired();

                entity.Property(e => e.insu_Precio).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<VW_tbDirector>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbDirector", "cine");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(511);

                entity.Property(e => e.dire_Apellidos)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.dire_FechaCrea).HasColumnType("datetime");

                entity.Property(e => e.dire_FechaModifica).HasColumnType("datetime");

                entity.Property(e => e.dire_FechaNacimiento).HasColumnType("date");

                entity.Property(e => e.dire_Nombres)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.dire_Sexo)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VW_tbEmpleado>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbEmpleados", "gral");

                entity.Property(e => e.carg_Cargo)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.dept_Descripcion)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.empl_Apellidos)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.empl_DNI)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.empl_DireccionExacta)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.empl_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.empl_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.empl_FechaNacimiento).HasColumnType("date");

                entity.Property(e => e.empl_Nombre)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.empl_Sexo)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.empl_Telefono)
                    .IsRequired()
                    .HasMaxLength(9);

                entity.Property(e => e.estc_Descripcion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.muni_Descripcion)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.sucu_Nombre).IsRequired();
            });

            modelBuilder.Entity<VW_tbFactura>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbFactura", "cine");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(511);

                entity.Property(e => e.clie_Apellidos)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.clie_Nombres)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.clie_RTN)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.fact_FechaCrea).HasColumnType("datetime");

                entity.Property(e => e.fact_FechaModifica).HasColumnType("datetime");
            });

            modelBuilder.Entity<VW_tbFacturaDetalle>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbFacturaDetalle", "cine");

                entity.Property(e => e.clie_Apellidos)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.clie_Nombres)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.clie_RTN)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.peli_Titulo)
                    .IsRequired()
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<VW_tbFacturaDetalle1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbFacturaDetalle1", "cine");

                entity.Property(e => e.casa_Categoria)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.casa_Precio).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.clie_Apellidos)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.clie_Nombres)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.clie_RTN)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.fade_ComboDetalle_Cantidad)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.fade_Combo_Cantidad)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.fade_Combo_Id)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.fade_FechaCrea).HasColumnType("datetime");

                entity.Property(e => e.fade_FechaModifica).HasColumnType("datetime");

                entity.Property(e => e.fade_Total).HasColumnType("decimal(30, 2)");

                entity.Property(e => e.fade_Total_Combo).HasColumnType("decimal(29, 2)");

                entity.Property(e => e.pago_Descripcion).HasMaxLength(200);

                entity.Property(e => e.peli_Titulo)
                    .IsRequired()
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<VW_tbHorario>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbHorario", "cine");

                entity.Property(e => e.HoraFin)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.HoraInicio)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.hor_Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VW_tbInsumo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbInsumos", "cine");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(511);

                entity.Property(e => e.insu_Descripcion).IsRequired();

                entity.Property(e => e.insu_FechaCrea).HasColumnType("datetime");

                entity.Property(e => e.insu_FechaModifica).HasColumnType("datetime");

                entity.Property(e => e.insu_Precio).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.insu_alt).HasMaxLength(20);
            });

            modelBuilder.Entity<VW_tbPelicula>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbPeliculas", "cine");

                entity.Property(e => e.Dire_Nombre)
                    .IsRequired()
                    .HasMaxLength(201);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(511);

                entity.Property(e => e.cate_Nombre).HasMaxLength(200);

                entity.Property(e => e.peli_FechaCrea).HasColumnType("datetime");

                entity.Property(e => e.peli_FechaModifica).HasColumnType("datetime");

                entity.Property(e => e.peli_TitulOriginal)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.peli_Titulo)
                    .IsRequired()
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<VW_tbRole>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbRoles", "acce");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(511);

                entity.Property(e => e.role_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.role_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.role_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<VW_tbSUCURSAL>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbSUCURSAL", "cine");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(511);

                entity.Property(e => e.dept_Descripcion)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.muni_Descripcion)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.sucu_Direccion).IsRequired();

                entity.Property(e => e.sucu_FechaCrea).HasColumnType("datetime");

                entity.Property(e => e.sucu_FechaModifica).HasColumnType("datetime");

                entity.Property(e => e.sucu_Nombre).IsRequired();
            });

            modelBuilder.Entity<tbAsiento>(entity =>
            {
                entity.HasKey(e => e.asie_Id)
                    .HasName("PK_cine_tbAsientos_asie_Id");

                entity.ToTable("tbAsientos", "cine");

                entity.Property(e => e.asie_Code)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.asie_FechaCrea)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.asie_FechaModifica).HasColumnType("datetime");

                entity.Property(e => e.asie_Reservado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.asie_SalaNavigation)
                    .WithMany(p => p.tbAsientos)
                    .HasForeignKey(d => d.asie_Sala)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_cine_tbAsientos_asie_Sala_cine_tbSalas_sala_Id");

                entity.HasOne(d => d.asie_UserCreaNavigation)
                    .WithMany(p => p.tbAsientoasie_UserCreaNavigations)
                    .HasForeignKey(d => d.asie_UserCrea)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_cine_tbAsientos_asie_UserCrea_acce_tbUsuarios_userId");

                entity.HasOne(d => d.asie_UserMoficaNavigation)
                    .WithMany(p => p.tbAsientoasie_UserMoficaNavigations)
                    .HasForeignKey(d => d.asie_UserMofica)
                    .HasConstraintName("FK_cine_tbAsiento_asie_UserMofica_acce_tbUsuarios_userId");
            });

            modelBuilder.Entity<tbCargo>(entity =>
            {
                entity.HasKey(e => e.carg_Id)
                    .HasName("PK_gral_tbCargos_carg_Id");

                entity.ToTable("tbCargos", "gral");

                entity.Property(e => e.car_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.carg_Cargo)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.carg_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.carg_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.carg_UsuarioCreadorNavigation)
                    .WithMany(p => p.tbCargocarg_UsuarioCreadorNavigations)
                    .HasForeignKey(d => d.carg_UsuarioCreador)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_gral_tbCargos_carg_UsuarioCreador_acce_tbUsuarios_userId");

                entity.HasOne(d => d.carg_UsuarioModificadoNavigation)
                    .WithMany(p => p.tbCargocarg_UsuarioModificadoNavigations)
                    .HasForeignKey(d => d.carg_UsuarioModificado)
                    .HasConstraintName("FK_gral_tbCargos_carg_UsuarioModificado_acce_tbUsuarios_userId");
            });

            modelBuilder.Entity<tbCategoria>(entity =>
            {
                entity.HasKey(e => e.cate_Id)
                    .HasName("PK_gral_tbCategorias_cate_Id");

                entity.ToTable("tbCategorias", "gral");

                entity.Property(e => e.cate_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.cate_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.cate_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.cate_Nombre).HasMaxLength(200);

                entity.HasOne(d => d.cate_UsuarioCreadorNavigation)
                    .WithMany(p => p.tbCategoriacate_UsuarioCreadorNavigations)
                    .HasForeignKey(d => d.cate_UsuarioCreador)
                    .HasConstraintName("FK_gral_tbCategorias_cate_UserCrea_acce_tbUsuarios_userId");

                entity.HasOne(d => d.cate_UsuarioModificadorNavigation)
                    .WithMany(p => p.tbCategoriacate_UsuarioModificadorNavigations)
                    .HasForeignKey(d => d.cate_UsuarioModificador)
                    .HasConstraintName("FK_gral_tbCategorias_cate_UserMofica_acce_tbUsuarios_userId");
            });

            modelBuilder.Entity<tbCategoriaSala>(entity =>
            {
                entity.HasKey(e => e.casa_Id)
                    .HasName("PK_cine_tbCategoriaSala_casa_Id");

                entity.ToTable("tbCategoriaSala", "cine");

                entity.Property(e => e.casa_Categoria)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<tbCliente>(entity =>
            {
                entity.HasKey(e => e.clie_Id)
                    .HasName("PK_gral_tbClientes_clie_Id");

                entity.ToTable("tbClientes", "gral");

                entity.HasIndex(e => e.clie_RTN, "UQ_gral_tbClientes_clie_RTN")
                    .IsUnique();

                entity.Property(e => e.clie_Apellidos)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.clie_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.clie_FechaCrea)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.clie_FechaModifica).HasColumnType("datetime");

                entity.Property(e => e.clie_Nombres)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.clie_RTN)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.HasOne(d => d.clie_UserCreaNavigation)
                    .WithMany(p => p.tbClienteclie_UserCreaNavigations)
                    .HasForeignKey(d => d.clie_UserCrea)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_gral_tbClientes_clie_UsuarioCrea_acce_tbUsuarios_userId");

                entity.HasOne(d => d.clie_UserModificaNavigation)
                    .WithMany(p => p.tbClienteclie_UserModificaNavigations)
                    .HasForeignKey(d => d.clie_UserModifica)
                    .HasConstraintName("FK_gral_tbClientes_clie_UsuarioModifica_acce_tbUsuarios_userId");
            });

            modelBuilder.Entity<tbCombo>(entity =>
            {
                entity.HasKey(e => e.comb_Id)
                    .HasName("PK_cine_tbCombo_comb_Id");

                entity.ToTable("tbCombos", "cine");

                entity.Property(e => e.comb_Descripcion).IsRequired();

                entity.Property(e => e.comb_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.comb_FechaCrea)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.comb_FechaModifica).HasColumnType("datetime");

                entity.Property(e => e.comb_Precio).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.comb_UserCreaNavigation)
                    .WithMany(p => p.tbCombocomb_UserCreaNavigations)
                    .HasForeignKey(d => d.comb_UserCrea)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_cine_tbCombo_comb_UserCrea_acce_tbUsuarios_userId");

                entity.HasOne(d => d.comb_UsuarioModificaNavigation)
                    .WithMany(p => p.tbCombocomb_UsuarioModificaNavigations)
                    .HasForeignKey(d => d.comb_UsuarioModifica)
                    .HasConstraintName("FK_cine_tbCombo_insu_UsuarioModifica_acce_tbUsuarios_userId");
            });

            modelBuilder.Entity<tbComboDetalle>(entity =>
            {
                entity.HasKey(e => e.cdet_Id)
                    .HasName("PK_cine_tbComboDetalle_cdet_Id");

                entity.ToTable("tbComboDetalle", "cine");

                entity.Property(e => e.cdet_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.cdet_FechaCrea)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.cdet_FechaModifica).HasColumnType("datetime");

                entity.HasOne(d => d.cdet_UserCreaNavigation)
                    .WithMany(p => p.tbComboDetallecdet_UserCreaNavigations)
                    .HasForeignKey(d => d.cdet_UserCrea)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_cine_tbComboDetalle_cdet_UserCrea_acce_tbUsuarios_userId");

                entity.HasOne(d => d.cdet_UserMoficaNavigation)
                    .WithMany(p => p.tbComboDetallecdet_UserMoficaNavigations)
                    .HasForeignKey(d => d.cdet_UserMofica)
                    .HasConstraintName("FK_cine_tbComboDetalle_cdet_UsuarioModifica_acce_tbUsuarios_userId");

                entity.HasOne(d => d.cdet_comb)
                    .WithMany(p => p.tbComboDetalles)
                    .HasForeignKey(d => d.cdet_combId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_cine_tbComboDetalle_cdet_combId_cine_tbCombos_comb_Id");

                entity.HasOne(d => d.cdet_insu)
                    .WithMany(p => p.tbComboDetalles)
                    .HasForeignKey(d => d.cdet_insuId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_cine_tbComboDetalle_cdet_insuId_cine_tbInsumos_insu_Id");
            });

            modelBuilder.Entity<tbDepartamento>(entity =>
            {
                entity.HasKey(e => e.dept_Id)
                    .HasName("PK_gral_tbDepartamentos_dept_Id");

                entity.ToTable("tbDepartamentos", "gral");

                entity.HasIndex(e => e.dept_Descripcion, "UQ_gral_tbDepartamentos_dept_Descripcion")
                    .IsUnique();

                entity.Property(e => e.dept_Descripcion)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.dept_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.dept_FechaCrea)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.dept_FechaModifica).HasColumnType("datetime");

                entity.HasOne(d => d.dept_UserCreaNavigation)
                    .WithMany(p => p.tbDepartamentodept_UserCreaNavigations)
                    .HasForeignKey(d => d.dept_UserCrea)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_gral_tbDepartamentos_dept_dept_UserCrea_acce_tbUsuarios_userId");

                entity.HasOne(d => d.dept_UserMoficaNavigation)
                    .WithMany(p => p.tbDepartamentodept_UserMoficaNavigations)
                    .HasForeignKey(d => d.dept_UserMofica)
                    .HasConstraintName("FK_gral_tbDepartamentos_dept_UsuarioModifica_acce_tbUsuarios_userId");
            });

            modelBuilder.Entity<tbDirectore>(entity =>
            {
                entity.HasKey(e => e.dire_Id)
                    .HasName("PK_cine_tbDirectores_dire_Id");

                entity.ToTable("tbDirectores", "cine");

                entity.Property(e => e.dire_Apellidos)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.dire_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.dire_FechaCrea)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.dire_FechaModifica).HasColumnType("datetime");

                entity.Property(e => e.dire_FechaNacimiento).HasColumnType("date");

                entity.Property(e => e.dire_Nombres)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.dire_Sexo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.dire_UsuCreaNavigation)
                    .WithMany(p => p.tbDirectoredire_UsuCreaNavigations)
                    .HasForeignKey(d => d.dire_UsuCrea)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_cine_tbDirectores_dire_UserCrea_acce_tbUsuarios_userId");

                entity.HasOne(d => d.dire_UsuMoficaNavigation)
                    .WithMany(p => p.tbDirectoredire_UsuMoficaNavigations)
                    .HasForeignKey(d => d.dire_UsuMofica)
                    .HasConstraintName("FK_cine_tbDirectores_dire_UserMofica_acce_tbUsuarios_userId");
            });

            modelBuilder.Entity<tbEmpleado>(entity =>
            {
                entity.HasKey(e => e.empl_Id)
                    .HasName("PK_gral_tbEmpleados_empl_Id");

                entity.ToTable("tbEmpleados", "gral");

                entity.Property(e => e.empl_Apellidos)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.empl_DNI)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.empl_DireccionExacta)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.empl_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.empl_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.empl_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.empl_FechaNacimiento).HasColumnType("date");

                entity.Property(e => e.empl_Nombre)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.empl_Sexo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.empl_Telefono)
                    .IsRequired()
                    .HasMaxLength(9);

                entity.HasOne(d => d.empl_CargoNavigation)
                    .WithMany(p => p.tbEmpleados)
                    .HasForeignKey(d => d.empl_Cargo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_gral_tbEmpleados_carg_Id_gral_tbCargos_carg_Id");

                entity.HasOne(d => d.empl_EstadocivilNavigation)
                    .WithMany(p => p.tbEmpleados)
                    .HasForeignKey(d => d.empl_Estadocivil)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_gral_tbEmpleados_empl_EstadoCivil_gral_tbEstadosCiviles_estc_Id");

                entity.HasOne(d => d.empl_UsuarioCreadorNavigation)
                    .WithMany(p => p.tbEmpleadoempl_UsuarioCreadorNavigations)
                    .HasForeignKey(d => d.empl_UsuarioCreador)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_gral_tbEmpleados_empl_UsuarioCreador_acce_tbUsuarios_userId");

                entity.HasOne(d => d.empl_UsuarioModificadoNavigation)
                    .WithMany(p => p.tbEmpleadoempl_UsuarioModificadoNavigations)
                    .HasForeignKey(d => d.empl_UsuarioModificado)
                    .HasConstraintName("FK_gral_tbEmpleados_empl_UsuarioModificado_acce_tbUsuarios_userId");
            });

            modelBuilder.Entity<tbEstadosCivile>(entity =>
            {
                entity.HasKey(e => e.estc_Id)
                    .HasName("PK_gral_tbEstadosCiviles_estc_Id");

                entity.ToTable("tbEstadosCiviles", "gral");

                entity.HasIndex(e => e.estc_Descripcion, "UQ_gral_tbEstadosCiviles_estc_Descripcion")
                    .IsUnique();

                entity.Property(e => e.estc_Descripcion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.estc_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.estc_FechaCrea)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.estc_FechaModifica).HasColumnType("datetime");

                entity.HasOne(d => d.estc_UserCreaNavigation)
                    .WithMany(p => p.tbEstadosCivileestc_UserCreaNavigations)
                    .HasForeignKey(d => d.estc_UserCrea)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_gral_tbEstadosCiviles_estc_UserCrea_acce_tbUsuarios_userId");

                entity.HasOne(d => d.estc_UserMoficaNavigation)
                    .WithMany(p => p.tbEstadosCivileestc_UserMoficaNavigations)
                    .HasForeignKey(d => d.estc_UserMofica)
                    .HasConstraintName("FK_gral_tbEstadosCiviles_estc_UserMofica_acce_tbUsuarios_userId");
            });

            modelBuilder.Entity<tbFactura>(entity =>
            {
                entity.HasKey(e => e.fact_Id)
                    .HasName("PK_cine_tbFacturas_fact_ID");

                entity.ToTable("tbFacturas", "cine");

                entity.Property(e => e.fact_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.fact_FechaCrea)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.fact_FechaModifica).HasColumnType("datetime");

                entity.HasOne(d => d.fact_ClienteNavigation)
                    .WithMany(p => p.tbFacturas)
                    .HasForeignKey(d => d.fact_Cliente)
                    .HasConstraintName("FK_cine_tbFacturas_fact_Cliente");
            });

            modelBuilder.Entity<tbFacturaDetalle>(entity =>
            {
                entity.HasKey(e => e.fade_Id)
                    .HasName("PK_cine_tbFacturaDetalle_fade_Id");

                entity.ToTable("tbFacturaDetalle", "cine");

                entity.Property(e => e.fade_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.fade_FechaCrea)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.fade_FechaModifica).HasColumnType("datetime");

                entity.HasOne(d => d.fade_ComboDetalleNavigation)
                    .WithMany(p => p.tbFacturaDetalles)
                    .HasForeignKey(d => d.fade_ComboDetalle)
                    .HasConstraintName("FK_cine_tbComboDetalle_fade_ComboDetalle");

                entity.HasOne(d => d.fade_FacturaNavigation)
                    .WithMany(p => p.tbFacturaDetalles)
                    .HasForeignKey(d => d.fade_Factura)
                    .HasConstraintName("FK_cine_tbFacturas_fade_Factura");

                entity.HasOne(d => d.fade_PagoNavigation)
                    .WithMany(p => p.tbFacturaDetalles)
                    .HasForeignKey(d => d.fade_Pago)
                    .HasConstraintName("FK_cine_tbMetodoPago_fade_Pago");

                entity.HasOne(d => d.fade_ProyeccionNavigation)
                    .WithMany(p => p.tbFacturaDetalles)
                    .HasForeignKey(d => d.fade_Proyeccion)
                    .HasConstraintName("FK_cine_tbProyeccion_fade_Proyeccion");
            });

            modelBuilder.Entity<tbHorario>(entity =>
            {
                entity.HasKey(e => e.hor_Id)
                    .HasName("PK_cine_tbHorarios");

                entity.ToTable("tbHorarios", "cine");
            });

            modelBuilder.Entity<tbInsumo>(entity =>
            {
                entity.HasKey(e => e.insu_Id)
                    .HasName("PK_cine_tbInsumos_insu_Id");

                entity.ToTable("tbInsumos", "cine");

                entity.Property(e => e.insu_Descripcion).IsRequired();

                entity.Property(e => e.insu_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.insu_FechaCrea)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.insu_FechaModifica).HasColumnType("datetime");

                entity.Property(e => e.insu_Precio).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.insu_alt).HasMaxLength(20);

                entity.HasOne(d => d.insu_UserCreaNavigation)
                    .WithMany(p => p.tbInsumoinsu_UserCreaNavigations)
                    .HasForeignKey(d => d.insu_UserCrea)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_cine_tbInsumos_insu_UsuarioCrea_acce_tbUsuarios_userId");

                entity.HasOne(d => d.insu_UsuarioModificaNavigation)
                    .WithMany(p => p.tbInsumoinsu_UsuarioModificaNavigations)
                    .HasForeignKey(d => d.insu_UsuarioModifica)
                    .HasConstraintName("FK_cine_tbInsumos_insu_UsuarioModifica_acce_tbUsuarios_userId");
            });

            modelBuilder.Entity<tbMetodosPago>(entity =>
            {
                entity.HasKey(e => e.pago_Id)
                    .HasName("PK_gral_tbMetodosPago_pago_ID");

                entity.ToTable("tbMetodosPago", "gral");

                entity.Property(e => e.pago_Descripcion).HasMaxLength(200);

                entity.Property(e => e.pago_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.pago_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.pago_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.pago_UsuarioCreadorNavigation)
                    .WithMany(p => p.tbMetodosPagopago_UsuarioCreadorNavigations)
                    .HasForeignKey(d => d.pago_UsuarioCreador)
                    .HasConstraintName("FK_gral_tbMetodosPago_pago_UsuarioCreador_acce_tbUsuarios_userId");

                entity.HasOne(d => d.pago_UsuarioModificadorNavigation)
                    .WithMany(p => p.tbMetodosPagopago_UsuarioModificadorNavigations)
                    .HasForeignKey(d => d.pago_UsuarioModificador)
                    .HasConstraintName("FK_gral_tbMetodosPago_pago_UsuarioModificador_acce_tbUsuarios_userId");
            });

            modelBuilder.Entity<tbMunicipio>(entity =>
            {
                entity.HasKey(e => e.muni_Id)
                    .HasName("PK_gral_tbMunicipios_muni_Id");

                entity.ToTable("tbMunicipios", "gral");

                entity.Property(e => e.muni_Descripcion)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.muni_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.muni_FechaCrea)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.muni_FechaModifica).HasColumnType("datetime");

                entity.HasOne(d => d.muni_UserCreaNavigation)
                    .WithMany(p => p.tbMunicipiomuni_UserCreaNavigations)
                    .HasForeignKey(d => d.muni_UserCrea)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_gral_tbMunicipios_muni_UserCrea_acce_tbUsuarios_userId");

                entity.HasOne(d => d.muni_UserMoficaNavigation)
                    .WithMany(p => p.tbMunicipiomuni_UserMoficaNavigations)
                    .HasForeignKey(d => d.muni_UserMofica)
                    .HasConstraintName("FK_gral_tbMunicipios_muni_UserMofica_acce_tbUsuarios_userId");

                entity.HasOne(d => d.muni_dep)
                    .WithMany(p => p.tbMunicipios)
                    .HasForeignKey(d => d.muni_depId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_gral_tbMunicipios_dept_Id");
            });

            modelBuilder.Entity<tbPantalla>(entity =>
            {
                entity.HasKey(e => e.panta_Id)
                    .HasName("PK_acce_tbPantallas_panta_Id");

                entity.ToTable("tbPantallas", "acce");

                entity.Property(e => e.panta_Descripcion).IsRequired();

                entity.Property(e => e.panta_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.panta_FechaCrea)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.panta_FechaModifica).HasColumnType("datetime");
            });

            modelBuilder.Entity<tbPelicula>(entity =>
            {
                entity.HasKey(e => e.peli_Id)
                    .HasName("PK_cine_tbPeliculas_peli_Id");

                entity.ToTable("tbPeliculas", "cine");

                entity.Property(e => e.peli_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.peli_FechaCrea)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.peli_FechaModifica).HasColumnType("datetime");

                entity.Property(e => e.peli_TitulOriginal)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.peli_Titulo)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.HasOne(d => d.peli_CategoriaNavigation)
                    .WithMany(p => p.tbPeliculas)
                    .HasForeignKey(d => d.peli_Categoria)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_cine_tbPelicuas_peli_Categoria_gral_tbCategorias_cate_Id");

                entity.HasOne(d => d.peli_DirectorNavigation)
                    .WithMany(p => p.tbPeliculas)
                    .HasForeignKey(d => d.peli_Director)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_cine_tbPelicuas_peli_Director_cine_tbDirectores_dire_Id");

                entity.HasOne(d => d.peli_UsuCreaNavigation)
                    .WithMany(p => p.tbPeliculapeli_UsuCreaNavigations)
                    .HasForeignKey(d => d.peli_UsuCrea)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_cine_tbPeliculas_peli_UserCrea_acce_tbUsuarios_userId");

                entity.HasOne(d => d.peli_UsuMoficaNavigation)
                    .WithMany(p => p.tbPeliculapeli_UsuMoficaNavigations)
                    .HasForeignKey(d => d.peli_UsuMofica)
                    .HasConstraintName("FK_cine_tbPeliculas_peli_UserMofica_acce_tbUsuarios_userId");
            });

            modelBuilder.Entity<tbProyeccione>(entity =>
            {
                entity.HasKey(e => e.proy_Id)
                    .HasName("PK_cine_tbProyecciones_proy_Id");

                entity.ToTable("tbProyecciones", "cine");

                entity.Property(e => e.proy_Estado).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.proy_HorarioNavigation)
                    .WithMany(p => p.tbProyecciones)
                    .HasForeignKey(d => d.proy_Horario)
                    .HasConstraintName("FK_cine_tbHorarios_proy_Horario");

                entity.HasOne(d => d.proy_PeliculaNavigation)
                    .WithMany(p => p.tbProyecciones)
                    .HasForeignKey(d => d.proy_Pelicula)
                    .HasConstraintName("FK_cine_tbPeliculas_proy_Pelicula_peli_Id");

                entity.HasOne(d => d.proy_SalaNavigation)
                    .WithMany(p => p.tbProyecciones)
                    .HasForeignKey(d => d.proy_Sala)
                    .HasConstraintName("FK_cine_tbSalas_proy_Sala_sala_Id");
            });

            modelBuilder.Entity<tbRole>(entity =>
            {
                entity.HasKey(e => e.role_Id)
                    .HasName("PK_acce_tbRoles_role_Id");

                entity.ToTable("tbRoles", "acce");

                entity.Property(e => e.role_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.role_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.role_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.role_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.role_UsuCreacionNavigation)
                    .WithMany(p => p.tbRolerole_UsuCreacionNavigations)
                    .HasForeignKey(d => d.role_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_gral_tbRoles_role_UsuCreacion_acce_tbUsuarios_userId");

                entity.HasOne(d => d.role_UsuModificacionNavigation)
                    .WithMany(p => p.tbRolerole_UsuModificacionNavigations)
                    .HasForeignKey(d => d.role_UsuModificacion)
                    .HasConstraintName("FK_gral_tbRoles_role_UsuModificacion_acce_tbUsuarios_userId");
            });

            modelBuilder.Entity<tbRolesPantalla>(entity =>
            {
                entity.HasKey(e => e.ropa_Id)
                    .HasName("PK_acce_tbRolesPantallas_ropa_Id");

                entity.ToTable("tbRolesPantallas", "acce");

                entity.Property(e => e.ropa_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ropa_FechaCrea)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ropa_FechaModifica).HasColumnType("datetime");

                entity.HasOne(d => d.ropa_PantallaNavigation)
                    .WithMany(p => p.tbRolesPantallas)
                    .HasForeignKey(d => d.ropa_Pantalla)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_acce_tbRolesPantallas_ropa_Pantalla_acce_tbPantallas_panta_Id");

                entity.HasOne(d => d.ropa_RolNavigation)
                    .WithMany(p => p.tbRolesPantallas)
                    .HasForeignKey(d => d.ropa_Rol)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_acce_tbRolesPantallas_ropa_Rol_acce_tbRoles_role_Id");

                entity.HasOne(d => d.ropa_UserCreaNavigation)
                    .WithMany(p => p.tbRolesPantallaropa_UserCreaNavigations)
                    .HasForeignKey(d => d.ropa_UserCrea)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_acce_tbRolesPantallas_ropa_UserCrea_acce_tbUsuarios_userId");

                entity.HasOne(d => d.ropa_UserMoficaNavigation)
                    .WithMany(p => p.tbRolesPantallaropa_UserMoficaNavigations)
                    .HasForeignKey(d => d.ropa_UserMofica)
                    .HasConstraintName("FK_acce_tbRolesPantallas_ropa_UsuarioModifica_acce_tbUsuarios_userId");
            });

            modelBuilder.Entity<tbSala>(entity =>
            {
                entity.HasKey(e => e.sala_Id)
                    .HasName("PK_cine_tbSalas_sala_Id");

                entity.ToTable("tbSalas", "cine");

                entity.Property(e => e.sala_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.sala_FechaCrea)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sala_FechaModifica).HasColumnType("datetime");

                entity.HasOne(d => d.sala_SucursalNavigation)
                    .WithMany(p => p.tbSalas)
                    .HasForeignKey(d => d.sala_Sucursal)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_cine_tbSalas_sala_Sucursal_cine_tbSucursales_sucu_Id");

                entity.HasOne(d => d.sala_TipoNavigation)
                    .WithMany(p => p.tbSalas)
                    .HasForeignKey(d => d.sala_Tipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_cine_tbCategoriaSala_sala_Tipo");

                entity.HasOne(d => d.sala_UserCreaNavigation)
                    .WithMany(p => p.tbSalasala_UserCreaNavigations)
                    .HasForeignKey(d => d.sala_UserCrea)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_cine_tbSalas_sala_UserCrea_acce_tbUsuarios_userId");

                entity.HasOne(d => d.sala_UserMoficaNavigation)
                    .WithMany(p => p.tbSalasala_UserMoficaNavigations)
                    .HasForeignKey(d => d.sala_UserMofica)
                    .HasConstraintName("FK_cine_tbSalas_sala_UserMofica_acce_tbUsuarios_userId");
            });

            modelBuilder.Entity<tbSucursale>(entity =>
            {
                entity.HasKey(e => e.sucu_Id)
                    .HasName("PK_cine_tbSucursales_sucu_Id");

                entity.ToTable("tbSucursales", "cine");

                entity.Property(e => e.sucu_Direccion).IsRequired();

                entity.Property(e => e.sucu_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.sucu_FechaCrea)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sucu_FechaModifica).HasColumnType("datetime");

                entity.Property(e => e.sucu_Nombre).IsRequired();

                entity.HasOne(d => d.sucu_CiudadNavigation)
                    .WithMany(p => p.tbSucursales)
                    .HasForeignKey(d => d.sucu_Ciudad)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_cine_tbSucursales_sucu_Ciudad_gral_tbMunicipios_muni_Id");

                entity.HasOne(d => d.sucu_UserCreaNavigation)
                    .WithMany(p => p.tbSucursalesucu_UserCreaNavigations)
                    .HasForeignKey(d => d.sucu_UserCrea)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_cine_tbSucursaless_sucu_UsuarioCrea_acce_tbUsuarios_userId");

                entity.HasOne(d => d.sucu_UsuarioModificaNavigation)
                    .WithMany(p => p.tbSucursalesucu_UsuarioModificaNavigations)
                    .HasForeignKey(d => d.sucu_UsuarioModifica)
                    .HasConstraintName("FK_cine_tbSucursales_sucu_UsuarioModifica_acce_tbUsuarios_userId");
            });

            modelBuilder.Entity<tbTicket>(entity =>
            {
                entity.HasKey(e => e.tick_Id)
                    .HasName("PK_cine_tbTickets_tick_Id");

                entity.ToTable("tbTickets", "cine");

                entity.Property(e => e.tick_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.tick_FechaCrea)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.tick_FechaModifica).HasColumnType("datetime");

                entity.HasOne(d => d.tick_AsientoNavigation)
                    .WithMany(p => p.tbTickets)
                    .HasForeignKey(d => d.tick_Asiento)
                    .HasConstraintName("FK_cine_tbTickets_tick_Asiento");

                entity.HasOne(d => d.tick_FacturaNavigation)
                    .WithMany(p => p.tbTickets)
                    .HasForeignKey(d => d.tick_Factura)
                    .HasConstraintName("FK_cine_tbFacturas_tick_Factura");

                entity.HasOne(d => d.tick_ProyeccionNavigation)
                    .WithMany(p => p.tbTickets)
                    .HasForeignKey(d => d.tick_Proyeccion)
                    .HasConstraintName("FK_cine_tbProyeccion_tick_Proyeccion");
            });

            modelBuilder.Entity<tbUsuario>(entity =>
            {
                entity.HasKey(e => e.user_Id)
                    .HasName("PK_acce_tbUsuarios_user_Id");

                entity.ToTable("tbUsuarios", "acce");

                entity.HasIndex(e => e.user_NombreUsuario, "UQ_acce_tbUsuarios_user_NombreUsuario")
                    .IsUnique();

                entity.Property(e => e.user_Contrasenia)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.user_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.user_FechaCrea)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.user_FechaModifica).HasColumnType("datetime");

                entity.Property(e => e.user_NombreUsuario)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.HasOne(d => d.user_EmpleadoNavigation)
                    .WithMany(p => p.tbUsuarios)
                    .HasForeignKey(d => d.user_Empleado)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_gral_tbUsuarios_user_Empleado_gral_tbEmpleados_empl_Id");

                entity.HasOne(d => d.user_RolNavigation)
                    .WithMany(p => p.tbUsuarios)
                    .HasForeignKey(d => d.user_Rol)
                    .HasConstraintName("FK_gral_tbUsuarios_user_Rol_acce_tbRoles_role_Id");

                entity.HasOne(d => d.user_UsuarioCreaNavigation)
                    .WithMany(p => p.Inverseuser_UsuarioCreaNavigation)
                    .HasForeignKey(d => d.user_UsuarioCrea)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_gral_tbUsuarios_user_UsuarioCrea_acce_tbUsuarios_userId");

                entity.HasOne(d => d.user_UsuarioModificaNavigation)
                    .WithMany(p => p.Inverseuser_UsuarioModificaNavigation)
                    .HasForeignKey(d => d.user_UsuarioModifica)
                    .HasConstraintName("FK_gral_tbUsuarios_user_UsuarioModifica_acce_tbUsuarios_userId");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}